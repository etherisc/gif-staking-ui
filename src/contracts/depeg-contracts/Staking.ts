/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBundleDataProvider {
  export type BundleKeyStruct = {
    instanceId: PromiseOrValue<BytesLike>;
    bundleId: PromiseOrValue<BigNumberish>;
  };

  export type BundleKeyStructOutput = [string, BigNumber] & {
    instanceId: string;
    bundleId: BigNumber;
  };
}

export declare namespace IStakingDataProvider {
  export type BundleStakeInfoStruct = {
    user: PromiseOrValue<string>;
    key: IBundleDataProvider.BundleKeyStruct;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleStakeInfoStructOutput = [
    string,
    IBundleDataProvider.BundleKeyStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    key: IBundleDataProvider.BundleKeyStructOutput;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "DIP_CONTRACT_ADDRESS()": FunctionFragment;
    "DIP_DECIMALS()": FunctionFragment;
    "MAINNET_ID()": FunctionFragment;
    "REWARD_MAX_PERCENTAGE()": FunctionFragment;
    "YEAR_DURATION()": FunctionFragment;
    "calculateCapitalSupport(address,uint256,uint256)": FunctionFragment;
    "calculateRequiredStaking(address,uint256,uint256)": FunctionFragment;
    "calculateRewards(uint256,uint256)": FunctionFragment;
    "calculateRewardsIncrement((address,(bytes32,uint256),uint256,uint256,uint256))": FunctionFragment;
    "fromRate(uint256)": FunctionFragment;
    "getBundleCapitalSupport(bytes32,uint256)": FunctionFragment;
    "getBundleRegistry()": FunctionFragment;
    "getBundleStakeInfo(bytes32,uint256,address)": FunctionFragment;
    "getBundleStakes(bytes32,uint256,address)": FunctionFragment;
    "getBundleStakes(bytes32,uint256)": FunctionFragment;
    "getRewardRate()": FunctionFragment;
    "getStakingRate(address,uint256)": FunctionFragment;
    "getStakingWallet()": FunctionFragment;
    "getTotalStakes()": FunctionFragment;
    "getTotalStakes(bytes32)": FunctionFragment;
    "hasBundleStakeInfo(bytes32,uint256,address)": FunctionFragment;
    "hasDefinedStakingRate(address,uint256)": FunctionFragment;
    "oneYear()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDipContract(address)": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "setStakingRate(address,uint256,uint256)": FunctionFragment;
    "stakeForBundle(bytes32,uint256,uint256)": FunctionFragment;
    "toRate(uint256,int8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeFromBundle(bytes32,uint256,uint256)": FunctionFragment;
    "unstakeFromBundle(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DIP_CONTRACT_ADDRESS"
      | "DIP_DECIMALS"
      | "MAINNET_ID"
      | "REWARD_MAX_PERCENTAGE"
      | "YEAR_DURATION"
      | "calculateCapitalSupport"
      | "calculateRequiredStaking"
      | "calculateRewards"
      | "calculateRewardsIncrement"
      | "fromRate"
      | "getBundleCapitalSupport"
      | "getBundleRegistry"
      | "getBundleStakeInfo"
      | "getBundleStakes(bytes32,uint256,address)"
      | "getBundleStakes(bytes32,uint256)"
      | "getRewardRate"
      | "getStakingRate"
      | "getStakingWallet"
      | "getTotalStakes()"
      | "getTotalStakes(bytes32)"
      | "hasBundleStakeInfo"
      | "hasDefinedStakingRate"
      | "oneYear"
      | "owner"
      | "renounceOwnership"
      | "setDipContract"
      | "setRewardRate"
      | "setStakingRate"
      | "stakeForBundle"
      | "toRate"
      | "transferOwnership"
      | "unstakeFromBundle(bytes32,uint256,uint256)"
      | "unstakeFromBundle(bytes32,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DIP_CONTRACT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIP_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINNET_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCapitalSupport",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredStaking",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsIncrement",
    values: [IStakingDataProvider.BundleStakeInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fromRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleCapitalSupport",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleStakeInfo",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleStakes(bytes32,uint256,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleStakes(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakes()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakes(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBundleStakeInfo",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDefinedStakingRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "oneYear", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDipContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForBundle",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFromBundle(bytes32,uint256,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFromBundle(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DIP_CONTRACT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIP_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAINNET_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCapitalSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fromRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBundleCapitalSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleStakes(bytes32,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleStakes(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakes()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBundleStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDefinedStakingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oneYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDipContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeFromBundle(bytes32,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeFromBundle(bytes32,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "LogStakingRewardRateSet(uint256,uint256)": EventFragment;
    "LogStakingStakedForBundle(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogStakingStakingRateSet(address,uint256,uint256,uint256)": EventFragment;
    "LogStakingUnstakedFromBundle(address,bytes32,uint256,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogStakingRewardRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStakingStakedForBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStakingStakingRateSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogStakingUnstakedFromBundle"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogStakingRewardRateSetEventObject {
  oldRewardRate: BigNumber;
  newRewardRate: BigNumber;
}
export type LogStakingRewardRateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogStakingRewardRateSetEventObject
>;

export type LogStakingRewardRateSetEventFilter =
  TypedEventFilter<LogStakingRewardRateSetEvent>;

export interface LogStakingStakedForBundleEventObject {
  user: string;
  instanceId: string;
  bundleId: BigNumber;
  amount: BigNumber;
  rewards: BigNumber;
}
export type LogStakingStakedForBundleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LogStakingStakedForBundleEventObject
>;

export type LogStakingStakedForBundleEventFilter =
  TypedEventFilter<LogStakingStakedForBundleEvent>;

export interface LogStakingStakingRateSetEventObject {
  token: string;
  chainId: BigNumber;
  oldStakingRate: BigNumber;
  newStakingRate: BigNumber;
}
export type LogStakingStakingRateSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogStakingStakingRateSetEventObject
>;

export type LogStakingStakingRateSetEventFilter =
  TypedEventFilter<LogStakingStakingRateSetEvent>;

export interface LogStakingUnstakedFromBundleEventObject {
  user: string;
  instanceId: string;
  bundleId: BigNumber;
  amount: BigNumber;
  rewards: BigNumber;
  all: boolean;
}
export type LogStakingUnstakedFromBundleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, boolean],
  LogStakingUnstakedFromBundleEventObject
>;

export type LogStakingUnstakedFromBundleEventFilter =
  TypedEventFilter<LogStakingUnstakedFromBundleEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAINNET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateCapitalSupport(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      dipAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmount: BigNumber }>;

    calculateRequiredStaking(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dipAmount: BigNumber }>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    calculateRewardsIncrement(
      stakeInfo: IStakingDataProvider.BundleStakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardsAmount: BigNumber }>;

    fromRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; divisor: BigNumber }
    >;

    getBundleCapitalSupport(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capitalAmount: BigNumber }>;

    getBundleRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { bundleRegistry: string }>;

    getBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IStakingDataProvider.BundleStakeInfoStructOutput] & {
        info: IStakingDataProvider.BundleStakeInfoStructOutput;
      }
    >;

    "getBundleStakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dipAmount: BigNumber }>;

    "getBundleStakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dipAmount: BigNumber }>;

    getRewardRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    getStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    getStakingWallet(
      overrides?: CallOverrides
    ): Promise<[string] & { stakingWallet: string }>;

    "getTotalStakes()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dipAmount: BigNumber }>;

    "getTotalStakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dipAmount: BigNumber }>;

    hasBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasInfo: boolean }>;

    hasDefinedStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasRate: boolean }>;

    oneYear(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yearInSeconds: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardRate(
      newRewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newStakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeForBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toRate(
      value: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unstakeFromBundle(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unstakeFromBundle(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  calculateCapitalSupport(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    dipAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRequiredStaking(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    targetAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewards(
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardsIncrement(
    stakeInfo: IStakingDataProvider.BundleStakeInfoStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fromRate(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; divisor: BigNumber }>;

  getBundleCapitalSupport(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundleRegistry(overrides?: CallOverrides): Promise<string>;

  getBundleStakeInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStakingDataProvider.BundleStakeInfoStructOutput>;

  "getBundleStakes(bytes32,uint256,address)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBundleStakes(bytes32,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingRate(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingWallet(overrides?: CallOverrides): Promise<string>;

  "getTotalStakes()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalStakes(bytes32)"(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasBundleStakeInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasDefinedStakingRate(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oneYear(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDipContract(
    dipTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardRate(
    newRewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingRate(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    newStakingRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeForBundle(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toRate(
    value: PromiseOrValue<BigNumberish>,
    exp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unstakeFromBundle(bytes32,uint256,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unstakeFromBundle(bytes32,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCapitalSupport(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      dipAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRequiredStaking(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsIncrement(
      stakeInfo: IStakingDataProvider.BundleStakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; divisor: BigNumber }
    >;

    getBundleCapitalSupport(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleRegistry(overrides?: CallOverrides): Promise<string>;

    getBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStakingDataProvider.BundleStakeInfoStructOutput>;

    "getBundleStakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBundleStakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingWallet(overrides?: CallOverrides): Promise<string>;

    "getTotalStakes()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalStakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasDefinedStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oneYear(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      newRewardRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newStakingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeForBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    toRate(
      value: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeFromBundle(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeFromBundle(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogStakingRewardRateSet(uint256,uint256)"(
      oldRewardRate?: null,
      newRewardRate?: null
    ): LogStakingRewardRateSetEventFilter;
    LogStakingRewardRateSet(
      oldRewardRate?: null,
      newRewardRate?: null
    ): LogStakingRewardRateSetEventFilter;

    "LogStakingStakedForBundle(address,bytes32,uint256,uint256,uint256)"(
      user?: null,
      instanceId?: null,
      bundleId?: null,
      amount?: null,
      rewards?: null
    ): LogStakingStakedForBundleEventFilter;
    LogStakingStakedForBundle(
      user?: null,
      instanceId?: null,
      bundleId?: null,
      amount?: null,
      rewards?: null
    ): LogStakingStakedForBundleEventFilter;

    "LogStakingStakingRateSet(address,uint256,uint256,uint256)"(
      token?: null,
      chainId?: null,
      oldStakingRate?: null,
      newStakingRate?: null
    ): LogStakingStakingRateSetEventFilter;
    LogStakingStakingRateSet(
      token?: null,
      chainId?: null,
      oldStakingRate?: null,
      newStakingRate?: null
    ): LogStakingStakingRateSetEventFilter;

    "LogStakingUnstakedFromBundle(address,bytes32,uint256,uint256,uint256,bool)"(
      user?: null,
      instanceId?: null,
      bundleId?: null,
      amount?: null,
      rewards?: null,
      all?: null
    ): LogStakingUnstakedFromBundleEventFilter;
    LogStakingUnstakedFromBundle(
      user?: null,
      instanceId?: null,
      bundleId?: null,
      amount?: null,
      rewards?: null,
      all?: null
    ): LogStakingUnstakedFromBundleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCapitalSupport(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      dipAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRequiredStaking(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsIncrement(
      stakeInfo: IStakingDataProvider.BundleStakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleCapitalSupport(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBundleStakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBundleStakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalStakes()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalStakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDefinedStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneYear(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardRate(
      newRewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newStakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeForBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toRate(
      value: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unstakeFromBundle(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unstakeFromBundle(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DIP_CONTRACT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAINNET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_MAX_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateCapitalSupport(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      dipAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRequiredStaking(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardsIncrement(
      stakeInfo: IStakingDataProvider.BundleStakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleCapitalSupport(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBundleStakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBundleStakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalStakes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalStakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasBundleStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDefinedStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      newRewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingRate(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newStakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeForBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toRate(
      value: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unstakeFromBundle(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unstakeFromBundle(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
